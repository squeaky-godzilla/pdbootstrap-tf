# PagerDuty setup (PDboot port)

# service naming convention: svc::<business unit>::<team>::<service name>::<env>

# Workflow:

# - create a new PD service
#   - add Prometheus integration
# - create PD schedule
#   - add escalation policy
# - query PD with emails and retrieve users
#   - add the users into the team

# token: oauth ?
# svc: real world name of the service
# business unit: self explanatory
# team: teamID in PD?
# env: environment int, stg, prod
# email: selfex

# variables:
# token (string)
# business_unit (string)
# team: team_short or team name in TF
# env: [int | stg | prd], just for naming convention
# email/users: ['list','of','emails']

# PagerDuty provider configuration section

provider "pagerduty" {
  token = "${var.pagerduty_token}"
}

# Create team

resource "pagerduty_team" "pd_team" {
  # name = "${var.team_name}"
  name = "${join("-", list(var.prefix, var.team_name))}"
}

# get user ID's

data "pagerduty_user" "user" {
  count = "${length("${var.users}")}"
  email = "${element(var.users, count.index)}"
}

resource "pagerduty_team_membership" "pd_team" {
  count = "${length("${var.users}")}"
  team_id = "${pagerduty_team.pd_team.id}"
  # user_id = "${data.pagerduty_user.user.*.id}"
  user_id = "${element(data.pagerduty_user.user.*.id, count.index)}"
}

# Create a new PD service

data "pagerduty_escalation_policy" "pd_escalation_policy" {
  name = "${var.escalation_policy}"
}

resource "pagerduty_service" "pd_service" {
    # service naming convention: svc::<business unit>::<team>::<service name>::<env>
    # name = "${var.service_name}"
    name = "${join("::", list("svc", var.business_unit, var.team_name, var.service_name, var.env))}"
    # description = "PD Service generated by ${var.module_long}" # alternative parametrical auto-gen description
    description = "auto-generated PD service"
    escalation_policy = "${data.pagerduty_escalation_policy.pd_escalation_policy.id}"

}

# Prometheus integration - Generic events API service integration

resource "pagerduty_service_integration" "prometheus" {
    name = "Prometheus integration"
    # description = "auto-generated PD service integration"
    type = "generic_events_api_inbound_integration"
    service = "${pagerduty_service.pd_service.id}"
}

# Prometheus integration - Prometheus vendor # doesn't seem to be working

# data "prometheus_vendor" "prometheus" {
#   name = "Prometheus"
# }
#
# resource "pagerduty_service_integration" "prometheus" {
#   name = "${data.pagerduty_vendor.prometheus.name}"
#   service = "${pagerduty_service.pd_service.id}"
#   vendor = "${data.pagerduty_vendor.prometheus.id}"
# }
# value = "${join("::", list(var.pagerduty_token, var.pagerduty_token))}"
resource "pagerduty_schedule" "pd_schedule" {
    # name = "${var.schedule_name}"
    name = "${join("-", list(var.prefix, var.schedule_name))}"
    time_zone = "America/New_York"
    layer {
      name                         = "Night Shift"
      start                        = "2015-11-06T20:00:00-05:00"
      rotation_virtual_start       = "2015-11-06T20:00:00-05:00"
      rotation_turn_length_seconds = 86400
      users                        = "${var.users}"

      restriction {
        type              = "daily_restriction"
        start_time_of_day = "08:00:00"
        duration_seconds  = 32400
      }
    # description = "auto-generated PD schedule"
}
}

# add sre-alert Slack extension

data "pagerduty_extension_schema" "webhook" {
  name = "Generic V2 Webhook"
}

# data "pagerduty_service" "service" {
#   name = "${var.service_name}"
# }

resource "pagerduty_extension" "slack" {  # just a boilerplate code at the moment
  name = "My Web App Extension"
  endpoint_url = "https://hooks.slack.com/services/<endpoint_here>"
  extension_schema = "${data.pagerduty_extension_schema.webhook.id}"
  extension_objects    = ["${pagerduty_service.pd_service.id}"]

  config = <<EOF
{
    "restrict": "any",
    "notify_types": {
            "resolve": false,
            "acknowledge": false,
            "assignments": false
    },
    "access_token": "XXX"
}
EOF

}
